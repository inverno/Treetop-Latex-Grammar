# Autogenerated from a Treetop grammar. Edits may be lost.


module Latex
  include Treetop::Runtime

  def root
    @root ||= :document
  end

  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_token
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Document,input, i0...index, s0)
    end

    node_cache[:document][start_index] = r0

    r0
  end

  def _nt_token
    start_index = index
    if node_cache[:token].has_key?(index)
      cached = node_cache[:token][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_verbatim
    if r1
      r0 = r1
    else
      r2 = _nt_command
      if r2
        r0 = r2
      else
        r3 = _nt_text
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:token][start_index] = r0

    r0
  end

  module Command0
    def operation
      elements[1]
    end

    def options
      elements[3]
    end

    def parameters
      elements[6]
    end

  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\\', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('\\')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_operation
      s1 << r3
      if r3
        if has_terminal?('[', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_options
          s1 << r5
          if r5
            if has_terminal?(']', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r6 = nil
            end
            s1 << r6
            if r6
              if has_terminal?('{', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r7 = nil
              end
              s1 << r7
              if r7
                r8 = _nt_parameters
                s1 << r8
                if r8
                  if has_terminal?('}', false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('}')
                    r9 = nil
                  end
                  s1 << r9
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Command,input, i1...index, s1)
      r1.extend(Command0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r10 = _nt_command_no_parameters
      if r10
        r0 = r10
      else
        r11 = _nt_command_no_options
        if r11
          r0 = r11
        else
          r12 = _nt_command_simple
          if r12
            r0 = r12
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:command][start_index] = r0

    r0
  end

  module CommandNoParameters0
    def operation
      elements[1]
    end

    def options
      elements[3]
    end

  end

  def _nt_command_no_parameters
    start_index = index
    if node_cache[:command_no_parameters].has_key?(index)
      cached = node_cache[:command_no_parameters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\\', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('\\')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_operation
      s0 << r2
      if r2
        if has_terminal?('[', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('[')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_options
          s0 << r4
          if r4
            if has_terminal?(']', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(']')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Command,input, i0...index, s0)
      r0.extend(CommandNoParameters0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:command_no_parameters][start_index] = r0

    r0
  end

  module CommandNoOptions0
    def operation
      elements[1]
    end

    def parameters
      elements[3]
    end

  end

  def _nt_command_no_options
    start_index = index
    if node_cache[:command_no_options].has_key?(index)
      cached = node_cache[:command_no_options][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\\', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('\\')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_operation
      s0 << r2
      if r2
        if has_terminal?('{', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('{')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_parameters
          s0 << r4
          if r4
            if has_terminal?('}', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('}')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Command,input, i0...index, s0)
      r0.extend(CommandNoOptions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:command_no_options][start_index] = r0

    r0
  end

  module CommandSimple0
    def operation
      elements[1]
    end

  end

  module CommandSimple1
    def operation
      elements[1]
    end
  end

  def _nt_command_simple
    start_index = index
    if node_cache[:command_simple].has_key?(index)
      cached = node_cache[:command_simple][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('\\', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('\\')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_operation
      s1 << r3
      if r3
        if has_terminal?('{}', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('{}')
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(Command,input, i1...index, s1)
      r1.extend(CommandSimple0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?('\\', false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('\\')
        r6 = nil
      end
      s5 << r6
      if r6
        r7 = _nt_operation
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(Command,input, i5...index, s5)
        r5.extend(CommandSimple1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:command_simple][start_index] = r0

    r0
  end

  def _nt_operation
    start_index = index
    if node_cache[:operation].has_key?(index)
      cached = node_cache[:operation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_plain_text

    node_cache[:operation][start_index] = r0

    r0
  end

  module Parameters0
    def parameter
      elements[0]
    end

    def parameters
      elements[2]
    end
  end

  def _nt_parameters
    start_index = index
    if node_cache[:parameters].has_key?(index)
      cached = node_cache[:parameters][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_parameter
    s1 << r2
    if r2
      if has_terminal?(',', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(',')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_parameters
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(Parameters,input, i1...index, s1)
      r1.extend(Parameters0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_parameter
      r5.extend(Parameter)
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameters][start_index] = r0

    r0
  end

  def _nt_parameter
    start_index = index
    if node_cache[:parameter].has_key?(index)
      cached = node_cache[:parameter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_command
    if r1
      r0 = r1
    else
      r2 = _nt_plain_text
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:parameter][start_index] = r0

    r0
  end

  def _nt_options
    start_index = index
    if node_cache[:options].has_key?(index)
      cached = node_cache[:options][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_parameters

    node_cache[:options][start_index] = r0

    r0
  end

  def _nt_plain_text
    start_index = index
    if node_cache[:plain_text].has_key?(index)
      cached = node_cache[:plain_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\\\^\\{^\\}^\\,^\\[^\\]]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Text,input, i0...index, s0)
    end

    node_cache[:plain_text][start_index] = r0

    r0
  end

  module Verbatim0
  end

  module Verbatim1
    def verbatim_text
      elements[2]
    end

  end

  def _nt_verbatim
    start_index = index
    if node_cache[:verbatim].has_key?(index)
      cached = node_cache[:verbatim][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\\begin{lstlisting}', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 18))
      @index += 18
    else
      terminal_parse_failure('\\begin{lstlisting}')
      r1 = nil
    end
    s0 << r1
    if r1
      i3, s3 = index, []
      if has_terminal?('[', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r4 = nil
      end
      s3 << r4
      if r4
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[^\\]]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s3 << r5
        if r5
          if has_terminal?(']', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r7 = nil
          end
          s3 << r7
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Verbatim0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r8 = _nt_verbatim_text
        s0 << r8
        if r8
          if has_terminal?('\\end{lstlisting}', false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 16))
            @index += 16
          else
            terminal_parse_failure('\\end{lstlisting}')
            r9 = nil
          end
          s0 << r9
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Verbatim,input, i0...index, s0)
      r0.extend(Verbatim1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:verbatim][start_index] = r0

    r0
  end

  module VerbatimText0
  end

  def _nt_verbatim_text
    start_index = index
    if node_cache[:verbatim_text].has_key?(index)
      cached = node_cache[:verbatim_text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1, s1 = index, []
      i2 = index
      if has_terminal?('\\end{lstlisting}', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 16))
        @index += 16
      else
        terminal_parse_failure('\\end{lstlisting}')
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r2
      if r2
        if has_terminal?('\G[\\w\\W]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s1 << r4
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(VerbatimText0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Text,input, i0...index, s0)

    node_cache[:verbatim_text][start_index] = r0

    r0
  end

  def _nt_text
    start_index = index
    if node_cache[:text].has_key?(index)
      cached = node_cache[:text][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\\\]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Text,input, i0...index, s0)
    end

    node_cache[:text][start_index] = r0

    r0
  end

end

class LatexParser < Treetop::Runtime::CompiledParser
  include Latex
end

